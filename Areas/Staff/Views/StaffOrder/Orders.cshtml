@model IEnumerable<QuanVitLonManager.Models.Order>
@using QuanVitLonManager.Models
@{
    ViewData["Title"] = ViewBag.Title ?? "Quản lý đơn hàng";
    Layout = "_StaffLayout";
}

<div class="container-fluid py-4">
    <div class="row mb-4">
        <div class="col-md-6">
            <h4 class="mb-0"><i class="fas fa-clipboard-list me-2"></i>@ViewData["Title"]</h4>
            <div id="newOrderAlert" class="alert alert-success alert-dismissible fade d-none mt-2" role="alert">
                <strong><i class="fas fa-bell me-2"></i>Có đơn hàng mới!</strong>
                <span id="newOrderMessage"></span>
                <a href="#" id="viewNewOrderLink" class="alert-link">Xem ngay</a>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        </div>
        <div class="col-md-6 text-md-end">
            <div class="btn-group" role="group">
                <a asp-action="NewOrders" class="btn btn-primary me-2">
                    <i class="fas fa-bell me-1"></i>Đơn hàng mới
                </a>
                <a asp-action="Orders" class="btn btn-outline-secondary me-2">
                    <i class="fas fa-list me-1"></i>Tất cả đơn hàng
                </a>
            </div>
            <div class="btn-group ms-2" role="group">
                <button type="button" class="btn btn-outline-primary" id="btnViewAll">Tất cả</button>
                <button type="button" class="btn btn-outline-warning" id="btnViewUnpaid">Chưa thanh toán</button>
                <button type="button" class="btn btn-outline-success" id="btnViewPaid">Đã thanh toán</button>
            </div>
        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover" id="ordersTable">
                    <thead class="table-light">
                        <tr>
                            <th>Mã đơn</th>
                            <th>Ngày đặt</th>
                            <th>Loại đơn</th>
                            <th>Món ăn</th>
                            <th>Tổng tiền</th>
                            <th>Trạng thái</th>
                            <th>Thanh toán</th>
                            <th>Hành động</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var order in Model)
                        {
                            <tr data-payment-status="@order.PaymentStatus">
                                <td>
                                    <strong>#@order.Id</strong>
                                </td>
                                <td>@order.OrderDate.ToString("dd/MM/yyyy HH:mm")</td>
                                <td>
                                    @if (order.OrderType == OrderType.DineIn)
                                    {
                                        <span class="badge bg-info">Ăn tại chỗ</span>
                                        <small class="d-block">Bàn @order.TableNumber</small>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">Mang đi</span>
                                    }
                                </td>
                                <td>
                                    @if (order.OrderDetails != null && order.OrderDetails.Any())
                                    {
                                        <ul class="list-unstyled mb-0">
                                            @foreach (var item in order.OrderDetails.GroupBy(od => od.MenuItem?.Name ?? "Món không tồn tại"))
                                            {
                                                <li><small>@item.Key: <span class="badge bg-secondary">@item.Sum(i => i.Quantity)</span></small></li>
                                            }
                                        </ul>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Không có món</span>
                                    }
                                </td>
                                <td class="fw-bold">@order.TotalAmount.ToString("N0") VNĐ</td>
                                <td>
                                    <span class="badge @GetOrderStatusBadgeClass(order.Status)">
                                        @GetOrderStatusText(order.Status)
                                    </span>
                                </td>
                                <td>
                                    @if (order.PaymentStatus == PaymentStatus.Paid)
                                    {
                                        <span class="badge bg-success">Đã thanh toán</span>
                                        <small class="d-block text-muted">@order.PaymentDate?.ToString("dd/MM/yyyy HH:mm")</small>
                                    }
                                    else
                                    {
                                        <span class="badge bg-warning text-dark">Chưa thanh toán</span>
                                    }
                                </td>
                                <td>
                                    <a asp-action="Details" asp-route-id="@order.Id" class="btn btn-sm btn-outline-primary">
                                        <i class="fas fa-info-circle"></i>
                                    </a>
                                    @if (order.PaymentStatus == PaymentStatus.Unpaid)
                                    {
                                        <a asp-action="Details" asp-route-id="@order.Id" class="btn btn-sm btn-success ms-1" title="Cập nhật thanh toán">
                                            <i class="fas fa-credit-card"></i>
                                        </a>
                                    }
                                    @if (order.PaymentStatus == PaymentStatus.Paid)
                                    {
                                        <a asp-controller="CustomerBill" asp-action="Details" asp-route-id="@order.Id" target="_blank" class="btn btn-sm btn-info ms-1" title="In hóa đơn">
                                            <i class="fas fa-print"></i>
                                        </a>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script src="~/js/notifications.js"></script>
    <script>
        // Kết nối SignalR
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/notificationHub")
            .withAutomaticReconnect()
            .build();

        connection.start().then(function() {
            console.log("SignalR connected");
            // Đăng ký nhóm Staff
            connection.invoke("JoinGroup", "Staff");
        }).catch(function(err) {
            console.error("SignalR connection error: " + err);
        });

        // Lắng nghe thông báo đơn hàng mới
        connection.on("ReceiveNewOrder", function(order) {
            console.log("New order received:", order);
            
            // Hiển thị thông báo
            const alert = $("#newOrderAlert");
            $("#newOrderMessage").text(`Đơn hàng #${order.orderId} - ${(order.totalAmount).toLocaleString('vi-VN')}đ`);
            $("#viewNewOrderLink").attr("href", `/Staff/StaffOrder/Details/${order.orderId}`);
            
            alert.removeClass("d-none").addClass("show");
            
            // Phát âm thanh thông báo
            try {
                // Thử sử dụng phát âm thanh melodic đầu tiên
                if (!playMelodicSound()) {
                    // Nếu không được, thử cách khác
                    if (!playDingDongSound()) {
                        // Thử cách đơn giản nhất
                        playNotificationSound();
                    }
                }
            } catch (e) {
                console.error("Không thể phát âm thanh thông báo:", e);
                
                // Fallback: Thử dùng Audio API truyền thống nếu có file âm thanh
                try {
                    const audio = new Audio("/sounds/notification.mp3");
                    audio.play().catch(function(error) {
                        console.log("Audio play failed:", error);
                    });
                } catch (audioError) {
                    console.error("Không thể phát âm thanh fallback:", audioError);
                }
            }
            
            // Tự động làm mới trang sau 5 giây nếu đang ở trang đơn hàng mới
            if (window.location.pathname.includes("/Staff/StaffOrder/NewOrders")) {
                setTimeout(function() {
                    window.location.reload();
                }, 5000);
            }
        });

        $(document).ready(function() {
            // Xử lý lọc đơn hàng theo trạng thái thanh toán
            $("#btnViewAll").click(function() {
                $(this).addClass('active').removeClass('btn-outline-primary').addClass('btn-primary');
                $("#btnViewPaid, #btnViewUnpaid").removeClass('active').removeClass('btn-success btn-warning').addClass('btn-outline-success btn-outline-warning');
                $("#ordersTable tbody tr").show();
            });
            
            $("#btnViewPaid").click(function() {
                $(this).addClass('active').removeClass('btn-outline-success').addClass('btn-success');
                $("#btnViewAll, #btnViewUnpaid").removeClass('active').removeClass('btn-primary btn-warning').addClass('btn-outline-primary btn-outline-warning');
                $("#ordersTable tbody tr").hide();
                $("#ordersTable tbody tr[data-payment-status='Paid']").show();
            });
            
            $("#btnViewUnpaid").click(function() {
                $(this).addClass('active').removeClass('btn-outline-warning').addClass('btn-warning');
                $("#btnViewAll, #btnViewPaid").removeClass('active').removeClass('btn-primary btn-success').addClass('btn-outline-primary btn-outline-success');
                $("#ordersTable tbody tr").hide();
                $("#ordersTable tbody tr[data-payment-status='Unpaid']").show();
            });
            
            // Mặc định hiển thị tất cả
            $("#btnViewAll").click();
        });
    </script>
}

@functions {
    string GetOrderStatusBadgeClass(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "bg-warning text-dark",
            OrderStatus.Confirmed => "bg-info",
            OrderStatus.Billing => "bg-primary",
            OrderStatus.Completed => "bg-success",
            OrderStatus.Cancelled => "bg-danger",
            _ => "bg-secondary"
        };
    }

    string GetOrderStatusText(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "Đang chờ xác nhận",
            OrderStatus.Confirmed => "Đã xác nhận",
            OrderStatus.Billing => "Đang chế biến",
            OrderStatus.Completed => "Đã hoàn thành",
            OrderStatus.Cancelled => "Đã hủy",
            _ => "Không xác định"
        };
    }
} 